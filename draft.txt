<!-- <!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <meta name="description" content="">
        <meta name="author" content="">

        <title>Kool Form Pack | Coming Soon Page</title>

        <link rel="preconnect" href="https://fonts.googleapis.com">
        
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

        <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,200;0,400;0,700;1,200&family=Unbounded:wght@400;700&display=swap" rel="stylesheet">
        
        <link href="css/bootstrap.min.css" rel="stylesheet">

        <link href="css/bootstrap-icons.css" rel="stylesheet">

        <link href="css/tooplate-kool-form-pack.css" rel="stylesheet">
        

    </head>
    
    <body>

        <main>

          


            <section class="hero-section d-flex justify-content-center align-items-center" id="section_1">
                <div class="container">
                    <div class="row">

                        <div class="col-lg-6 col-12 mx-auto">
                            
                            <h1 class="text-white mt-2 mb-4 pb-2 " style="font-size: 30px;" text-align-last="center" >
                                <typing-effect data-lines='["How does your daily lifestyle impact forests?", "Start your Journey to discover your personal impact"]' data-continue-to="email-container" class="js-signup-typed-welcome js-octocaptcha-hide">
                                    <span data-target="typing-effect.content" class="text-mono text-gray-light-mktg"></span>
                                    <span data-target="typing-effect.cursor" class="typing-effect-cursor" hidden="">|</span>
                                </typing-effect>
                            </h1>    
                            
                            <div>
                                <a href="#" class="custom-btn custom-border-btn btn" data-bs-toggle="modal" data-bs-target="#subscribeModal">Let's Start
                                    <i class="bi-arrow-right ms-2"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="video-wrap">
                    <video autoplay="" loop="" muted="" class="custom-video" poster="">
                        <source src="videos/video.mp4" type="video/mp4">

                        Your browser does not support the video tag.
                    </video>
                </div>
            </section>
        </main>

         <script>
            const typingEffect = (element, lines) => {
                let lineIndex = 0;
                let charIndex = 0;
                let currentLine = lines[lineIndex];
    
                const typingInterval = setInterval(() => {
                    if (charIndex < currentLine.length) {
                        element.innerHTML += currentLine.charAt(charIndex);
                        charIndex++;
                    } else {
                        if (lineIndex < lines.length - 1) {
                            lineIndex++;
                            charIndex = 0;
                            currentLine = lines[lineIndex];
                            element.innerHTML += '<br>';
                        } else {
                            clearInterval(typingInterval);
                        }
                    }
                }, 100); 
            };
            document.addEventListener("DOMContentLoaded", () => {
                const welcomeMessage = document.querySelector(".js-signup-typed-welcome span[data-target='typing-effect.content']");
                const lines = ["How does your daily lifestyle impact forests?", "Start your Journey to discover your personal impact"];
                typingEffect(welcomeMessage, lines);
            });
    
            document.getElementById('email').addEventListener('input', function() {
                const emailInput = this.value;
                const continueButton = document.querySelector('.signup-continue-button');
                
                if (emailInput) {
                    continueButton.disabled = false;
                } else {
                    continueButton.disabled = true;
                }
            });
         </script>
        <script src="js/jquery.min.js"></script>
        <script src="js/bootstrap.bundle.min.js"></script>
        <script src="js/countdown.js"></script>
        <script src="js/init.js"></script>

    </body>
</html> -->


async function startBiometricMeasurement() {
            // طلب إذن الوصول إلى الكاميرا
            const stream = await navigator.mediaDevices.getUserMedia({ video: true });
            const video = document.createElement('video');
            video.srcObject = stream;
            video.play();

            // عرض الفيديو في الشاشة
            const biometricDataDiv = document.getElementById('biometricData');
            biometricDataDiv.classList.remove('d-none');
            biometricDataDiv.prepend(video);
            video.style.display = 'none'; // إخفاء الفيديو لأنه يستخدم فقط للتحليل

            // إنشاء الرسم البياني
            createChart();

            // تحليل تعبيرات الوجه
            video.addEventListener('play', () => {
                const canvas = faceapi.createCanvasFromMedia(video);
                canvas.style.display = 'none'; // إخفاء اللوحة لأنها تستخدم فقط للتحليل
                document.body.append(canvas);

                const displaySize = { width: video.width, height: video.height };
                faceapi.matchDimensions(canvas, displaySize);

                setInterval(async () => {
                    const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceExpressions();

                    const resizedDetections = faceapi.resizeResults(detections, displaySize);
                    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);

                    // رسم الكشف على اللوحة (يمكن إخفاؤه إذا لم يكن مطلوبًا)
                    faceapi.draw.drawDetections(canvas, resizedDetections);
                    faceapi.draw.drawFaceExpressions(canvas, resizedDetections);

                    if (detections.length > 0) {
                        const expressions = detections[0].expressions;
                        const maxExpression = Object.keys(expressions).reduce((a, b) => expressions[a] > expressions[b] ? a : b);

                        // محاكاة بيانات بيومترية بناءً على التعبيرات
                        let heartRate = 70; // قيمة افتراضية
                        let stressLevel = 0; // قيمة افتراضية

                        if (maxExpression === 'angry' || maxExpression === 'fearful' || maxExpression === 'sad' || maxExpression === 'surprised') {
                            heartRate = 90; // زيادة معدل ضربات القلب
                            stressLevel = 80; // مستوى توتر مرتفع
                        } else if (maxExpression === 'happy' ) {
                            heartRate = 75; // معدل ضربات قلب معتدل
                            stressLevel = 30; // مستوى توتر منخفض
                        } else {
                            heartRate = 70; // معدل ضربات قلب معتدل
                            stressLevel = 50; // مستوى توتر متوسط
                        }

                        document.getElementById('heartRate').textContent = heartRate;
                        document.getElementById('stressLevel').textContent = stressLevel;
                        document.getElementById('biometricData').classList.remove('d-none');

                        // تحديث الرسم البياني
                        const currentTime = new Date().toLocaleTimeString();
                        biometricChart.data.labels.push(currentTime);
                        biometricChart.data.datasets[0].data.push(heartRate);
                        biometricChart.data.datasets[1].data.push(stressLevel);
                        biometricChart.update();
                    }
                }, 3000); // تحديث كل 3 ثوانٍ
            });
        }

        // Request camera access
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                const video = document.createElement('video');
                video.srcObject = stream;
                video.play();
        
                // Display the video in the biometric data section
                const biometricDataDiv = document.getElementById('biometricData');
                biometricDataDiv.classList.remove('d-none');
                biometricDataDiv.prepend(video);
                video.style.display = 'block'; // Show video for debugging (can be hidden)
        
                // Create the chart
                createChart();
        
                // Load face-api.js models and start face detection
                video.addEventListener('play', async () => {
                    const canvas = faceapi.createCanvasFromMedia(video);
                    document.body.append(canvas);
        
                    const displaySize = { width: video.width, height: video.height };
                    faceapi.matchDimensions(canvas, displaySize);
        
                    // Continuously detect face expressions every 3 seconds
                    setInterval(async () => {
                        const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceExpressions();
        
                        if (detections.length > 0) {
                            const expressions = detections[0].expressions;
                            const maxExpression = Object.keys(expressions).reduce((a, b) => expressions[a] > expressions[b] ? a : b);
        
                            // Simulated biometric data based on facial expression
                            let heartRate = 70;  // Default heart rate
                            let stressLevel = 0; // Default stress level
        
                            if (maxExpression === 'angry' || maxExpression === 'fearful' || maxExpression === 'sad') {
                                heartRate = 90; // Increased heart rate
                                stressLevel = 80; // High stress level
                            } else if (maxExpression === 'happy' || maxExpression === 'surprised') {
                                heartRate = 75; // Moderate heart rate
                                stressLevel = 30; // Low stress level
                            } else {
                                heartRate = 70; // Normal heart rate
                                stressLevel = 50; // Moderate stress level
                            }
        
                            // Update chart with the biometric data
                            const currentTime = new Date().toLocaleTimeString();
                            biometricChart.data.labels.push(currentTime);
                            biometricChart.data.datasets[0].data.push(heartRate);
                            biometricChart.data.datasets[1].data.push(stressLevel);
                            biometricChart.update();
                        }
                    }, 3000); // Run every 3 seconds
                });


        async function startBiometricMeasurement() {
            try {
                setTimeout(() => {
                    const stream =  navigator.mediaDevices.getUserMedia({ video: true });
                    const video = document.createElement('video');
                    video.play();

                    const biometricDataDiv = document.getElementById('biometricData');
                    biometricDataDiv.classList.remove('d-none');
                    biometricDataDiv.prepend(video);
                    video.style.display = 'none'; 

                   

                    // تحليل تعبيرات الوجه
                    video.addEventListener('play', () => {
                        const canvas = faceapi.createCanvasFromMedia(video);
                        canvas.style.display = 'none'; // إخفاء اللوحة لأنها تستخدم فقط للتحليل
                        document.body.append(canvas);

                        const displaySize = { width: video.width, height: video.height };
                        faceapi.matchDimensions(canvas, displaySize);

                        setInterval(async () => {
                            const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceExpressions();

                            const resizedDetections = faceapi.resizeResults(detections, displaySize);
                            canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);

                            // رسم الكشف على اللوحة (يمكن إخفاؤه إذا لم يكن مطلوبًا)
                            faceapi.draw.drawDetections(canvas, resizedDetections);
                            faceapi.draw.drawFaceExpressions(canvas, resizedDetections);

                            if (detections.length > 0) {
                                const expressions = detections[0].expressions;
                                const maxExpression = Object.keys(expressions).reduce((a, b) => expressions[a] > expressions[b] ? a : b);

                                // محاكاة بيانات بيومترية بناءً على التعبيرات
                                let heartRate = 70; // قيمة افتراضية
                                let stressLevel = 0; // قيمة افتراضية

                                if (maxExpression === 'angry' || maxExpression === 'fearful' || maxExpression === 'sad' || maxExpression === 'surprised') {
                                    heartRate = 90; // زيادة معدل ضربات القلب
                                    stressLevel = 80; // مستوى توتر مرتفع
                                } else if (maxExpression === 'happy' ) {
                                    heartRate = 75; // معدل ضربات قلب معتدل
                                    stressLevel = 30; // مستوى توتر منخفض
                                } else {
                                    heartRate = 70; // معدل ضربات قلب معتدل
                                    stressLevel = 50; // مستوى توتر متوسط
                                }

                                document.getElementById('heartRate').textContent = heartRate;
                                document.getElementById('stressLevel').textContent = stressLevel;
                                document.getElementById('biometricData').classList.remove('d-none');

                                // تحديث الرسم البياني
                                const currentTime = new Date().toLocaleTimeString();
                                biometricChart.data.labels.push(currentTime);
                                biometricChart.data.datasets[0].data.push(heartRate);
                                biometricChart.data.datasets[1].data.push(stressLevel);
                                biometricChart.update();
                            }
                        }, 3000); // تحديث كل 3 ثوانٍ
                    })
                
                })
        
            } catch (err) {
                console.error('Error accessing the camera: ', err);
                alert('Unable to access the camera. Please make sure you have granted permission.');
            }
        }
